#!/bin/bash

exec >> /var/log/razor.log 2>&1

echo "Starting post_install"

# Wait for network to come up when using NetworkManager.
if service NetworkManager status >/dev/null 2>&1 && type -P nm-online; then
    nm-online -q --timeout=10 || nm-online -q -x --timeout=30
    [ "$?" -eq 0 ] || exit 1
fi

<%= render_template("set_hostname") %>

<%= render_template("store_ip") %>

# @todo lutter 2013-09-12: we should register the system with RHN; be
# careful though, since this file is also used by the CentOS installer, for
# which there is no RHN registration

<%
require "uri"

parsed = URI.parse(repo_url)

razor_ip = parsed.host

parsed.host = "dellasm"

iso_repo_url = parsed.to_s
%>

# add the dellasm host entry to /etc/hosts
echo "<%= razor_ip %> dellasm" >> /etc/hosts

<%# Get the OS distribution, major, and minor versions %>
<%# These commands only work for redhat-like distributions due to the absence of system-release on other distributions %>

<%# Parse the /etc/system-release file to determine distribution and version %>
if [ -f "/etc/system-release" ]; then
  # Will resolve to either "centos", "redhat", or "fedora"
  DISTRIBUTION=$(cat /etc/system-release | sed -e 's/.*\(CentOS\|Red\sHat\|Fedora\).*/\L\1/' | sed -e 's/\s//')
  # Get first and second match for version numbers
  MAJOR_VERSION=$(cat /etc/system-release | grep -oh "[0-9]*" | sed -n '1 p')
  MINOR_VERSION=$(cat /etc/system-release | grep -oh "[0-9]*" | sed -n '2 p')
fi

<%
# Grab the options hash to get the RCM repos
options = node.policy.node_metadata["installer_options"] || {}

repo_name = options["package_repo"]
repos = options["repository_info"]
vxos_repo = repos.find {|r| r["razorName"] == repo_name}

yum_repos = vxos_repo["metadata"]["repos"]

# Loop through all repos from the RCM and add them to /etc/yum.repos.d/
yum_repos.each do |repo|
  name = repo["name"] || "scaleio"
  gpg_check = repo["gpg_key"] != "undef" && !!repo["gpg_key"]
  base_url_path = [vxos_repo["baseUrl"], repo["base_path"]].reject {|e| e.nil? || e.empty?}.join("/")
%>

<%# Check if repo is only for specific distribution, if it isn't assume it's for all distributions %>
<% if repo["distribution"] %>
if [[ $DISTRIBUTION == "<%= repo["distribution"] %>"
  && $MAJOR_VERSION == "<%= repo["distribution_major_version"] %>"
  && $MINOR_VERSION == "<%= repo["distribution_minor_version"] %>" ]]; then
<% end %>

<%# Write the yum repo file %>
cat > /etc/yum.repos.d/<%= name %>.repo << EOF
[<%= name %>]
name=<%= repo["description"] %>
baseurl=<%= base_url_path %>
gpgcheck=<%= gpg_check %>
<% if gpg_check %>
gpgkey=<%= "%s/%s" % [base_url_path, repo["gpg_key"]] %>
<% end %>
EOF

<%# Check if repo is only for specific distribution (close if) %>
<% if repo["distribution"] %>
fi
<% end
end
%>

# Install the rpms from the added repos with the base/updates/extras temporarily disabled
# We will later permanently disable them with yum-config-manager
yum --disablerepo=base --disablerepo=updates --disablerepo=extras install yum-utils ntp redhat-lsb -y

# Disable base and updates repos permanently as node may not have internet access
yum-config-manager --disable base
yum-config-manager --disable updates
yum-config-manager --disable extras

# Check if the we are on RHEL 7.6 and doing an SO deployment with nvdimm compression
# If so, install the kmod-redhat-nfit kernel patch so we can use nvdimm drives on RHEL 7.6
<% if options["scaleio_role"] == "storage_only" && !!options["compression_enabled"] %>
if [[ $DISTRIBUTION == "redhat"
  && $MAJOR_VERSION == "7"
  && $MINOR_VERSION == "6" ]]; then
  yum install -y kmod-redhat-nfit
fi
<% end %>

# Figure out which GPG key to use based on OS
if grep -qi 'Red Hat' /etc/redhat-release; then
  GPGKEY=RPM-GPG-KEY-redhat-release
elif grep -qi 'CentOS' /etc/redhat-release; then
  GPGKEY=RPM-GPG-KEY-CentOS-\$releasever
else
  echo "WARNING: Could not find GPG key, razor-internal OS repo will not be added."
fi

# Add base repo from iso
if [ ! -z "$GPGKEY" ]; then
  cat > /etc/yum.repos.d/razor-internal.repo << EOF
[razor-internal]
name=Internal Razor OS Repository
baseurl=<%= iso_repo_url %>
gpgcheck=1
gpgkey=<%= iso_repo_url %>$GPGKEY
enabled=True
EOF
fi

yum update -y
yum install -y sg3_utils

<%# Grab the script from the repo metadata %>
<% script = vxos_repo["metadata"]["script"] %>

<%# Check if the script exists, if it does, download and execute it %>
<% if script %>
# Download and execute the script specified on the repo metadata
curl <%= [vxos_repo["baseUrl"], script].join("/") %> | bash
<% end %>

<%= render_template("os_complete") %>

# We are done
curl -s <%= stage_done_url("finished") %>
